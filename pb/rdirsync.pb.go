// Code generated by protoc-gen-go.
// source: rdirsync.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	rdirsync.proto

It has these top-level messages:
	StatRequest
	ReadDirRequest
	FileInfos
	FileInfo
	FetchFileRequest
	FileChunk
	SendFileRequest
	Empty
	ChownRequest
	ChmodRequest
	ChtimesRequest
	EnsureNotExistRequest
	EnsureDirExistsRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatRequest struct {
	Path               string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	WantsOwnerAndGroup bool   `protobuf:"varint,2,opt,name=wantsOwnerAndGroup" json:"wantsOwnerAndGroup,omitempty"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReadDirRequest struct {
	Path               string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	AtMostCount        int32  `protobuf:"varint,2,opt,name=atMostCount" json:"atMostCount,omitempty"`
	WantsOwnerAndGroup bool   `protobuf:"varint,3,opt,name=wantsOwnerAndGroup" json:"wantsOwnerAndGroup,omitempty"`
}

func (m *ReadDirRequest) Reset()                    { *m = ReadDirRequest{} }
func (m *ReadDirRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadDirRequest) ProtoMessage()               {}
func (*ReadDirRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FileInfos struct {
	Infos []*FileInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
}

func (m *FileInfos) Reset()                    { *m = FileInfos{} }
func (m *FileInfos) String() string            { return proto.CompactTextString(m) }
func (*FileInfos) ProtoMessage()               {}
func (*FileInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileInfos) GetInfos() []*FileInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type FileInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Mode int32  `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	// NOTE: int64 time containes nanoseconds from 1970-01-01T00:00:00Z
	ModTime int64  `protobuf:"varint,4,opt,name=modTime" json:"modTime,omitempty"`
	Owner   string `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`
	Group   string `protobuf:"bytes,6,opt,name=group" json:"group,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type FetchFileRequest struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	BufSize int32  `protobuf:"varint,2,opt,name=bufSize" json:"bufSize,omitempty"`
}

func (m *FetchFileRequest) Reset()                    { *m = FetchFileRequest{} }
func (m *FetchFileRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchFileRequest) ProtoMessage()               {}
func (*FetchFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type FileChunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *FileChunk) Reset()                    { *m = FileChunk{} }
func (m *FileChunk) String() string            { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()               {}
func (*FileChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SendFileRequest struct {
	Path  string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Chunk []byte `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *SendFileRequest) Reset()                    { *m = SendFileRequest{} }
func (m *SendFileRequest) String() string            { return proto.CompactTextString(m) }
func (*SendFileRequest) ProtoMessage()               {}
func (*SendFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ChownRequest struct {
	Path  string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Group string `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
}

func (m *ChownRequest) Reset()                    { *m = ChownRequest{} }
func (m *ChownRequest) String() string            { return proto.CompactTextString(m) }
func (*ChownRequest) ProtoMessage()               {}
func (*ChownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ChmodRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode int32  `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *ChmodRequest) Reset()                    { *m = ChmodRequest{} }
func (m *ChmodRequest) String() string            { return proto.CompactTextString(m) }
func (*ChmodRequest) ProtoMessage()               {}
func (*ChmodRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ChtimesRequest struct {
	Path  string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Atime int64  `protobuf:"varint,2,opt,name=atime" json:"atime,omitempty"`
	Mtime int64  `protobuf:"varint,3,opt,name=mtime" json:"mtime,omitempty"`
}

func (m *ChtimesRequest) Reset()                    { *m = ChtimesRequest{} }
func (m *ChtimesRequest) String() string            { return proto.CompactTextString(m) }
func (*ChtimesRequest) ProtoMessage()               {}
func (*ChtimesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type EnsureNotExistRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *EnsureNotExistRequest) Reset()                    { *m = EnsureNotExistRequest{} }
func (m *EnsureNotExistRequest) String() string            { return proto.CompactTextString(m) }
func (*EnsureNotExistRequest) ProtoMessage()               {}
func (*EnsureNotExistRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type EnsureDirExistsRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *EnsureDirExistsRequest) Reset()                    { *m = EnsureDirExistsRequest{} }
func (m *EnsureDirExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*EnsureDirExistsRequest) ProtoMessage()               {}
func (*EnsureDirExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto.RegisterType((*StatRequest)(nil), "pb.StatRequest")
	proto.RegisterType((*ReadDirRequest)(nil), "pb.ReadDirRequest")
	proto.RegisterType((*FileInfos)(nil), "pb.FileInfos")
	proto.RegisterType((*FileInfo)(nil), "pb.FileInfo")
	proto.RegisterType((*FetchFileRequest)(nil), "pb.FetchFileRequest")
	proto.RegisterType((*FileChunk)(nil), "pb.FileChunk")
	proto.RegisterType((*SendFileRequest)(nil), "pb.SendFileRequest")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*ChownRequest)(nil), "pb.ChownRequest")
	proto.RegisterType((*ChmodRequest)(nil), "pb.ChmodRequest")
	proto.RegisterType((*ChtimesRequest)(nil), "pb.ChtimesRequest")
	proto.RegisterType((*EnsureNotExistRequest)(nil), "pb.EnsureNotExistRequest")
	proto.RegisterType((*EnsureDirExistsRequest)(nil), "pb.EnsureDirExistsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RDirSync service

type RDirSyncClient interface {
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*FileInfo, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RDirSync_ReadDirClient, error)
	FetchFile(ctx context.Context, in *FetchFileRequest, opts ...grpc.CallOption) (RDirSync_FetchFileClient, error)
	SendFile(ctx context.Context, opts ...grpc.CallOption) (RDirSync_SendFileClient, error)
	Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*Empty, error)
	Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*Empty, error)
	Chtimes(ctx context.Context, in *ChtimesRequest, opts ...grpc.CallOption) (*Empty, error)
	EnsureDirExists(ctx context.Context, in *EnsureDirExistsRequest, opts ...grpc.CallOption) (*Empty, error)
	EnsureNotExist(ctx context.Context, in *EnsureNotExistRequest, opts ...grpc.CallOption) (*Empty, error)
}

type rDirSyncClient struct {
	cc *grpc.ClientConn
}

func NewRDirSyncClient(cc *grpc.ClientConn) RDirSyncClient {
	return &rDirSyncClient{cc}
}

func (c *rDirSyncClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/pb.RDirSync/Stat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDirSyncClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (RDirSync_ReadDirClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RDirSync_serviceDesc.Streams[0], c.cc, "/pb.RDirSync/ReadDir", opts...)
	if err != nil {
		return nil, err
	}
	x := &rDirSyncReadDirClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RDirSync_ReadDirClient interface {
	Recv() (*FileInfos, error)
	grpc.ClientStream
}

type rDirSyncReadDirClient struct {
	grpc.ClientStream
}

func (x *rDirSyncReadDirClient) Recv() (*FileInfos, error) {
	m := new(FileInfos)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rDirSyncClient) FetchFile(ctx context.Context, in *FetchFileRequest, opts ...grpc.CallOption) (RDirSync_FetchFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RDirSync_serviceDesc.Streams[1], c.cc, "/pb.RDirSync/FetchFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &rDirSyncFetchFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RDirSync_FetchFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type rDirSyncFetchFileClient struct {
	grpc.ClientStream
}

func (x *rDirSyncFetchFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rDirSyncClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (RDirSync_SendFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RDirSync_serviceDesc.Streams[2], c.cc, "/pb.RDirSync/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &rDirSyncSendFileClient{stream}
	return x, nil
}

type RDirSync_SendFileClient interface {
	Send(*SendFileRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type rDirSyncSendFileClient struct {
	grpc.ClientStream
}

func (x *rDirSyncSendFileClient) Send(m *SendFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rDirSyncSendFileClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rDirSyncClient) Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.RDirSync/Chown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDirSyncClient) Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.RDirSync/Chmod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDirSyncClient) Chtimes(ctx context.Context, in *ChtimesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.RDirSync/Chtimes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDirSyncClient) EnsureDirExists(ctx context.Context, in *EnsureDirExistsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.RDirSync/EnsureDirExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDirSyncClient) EnsureNotExist(ctx context.Context, in *EnsureNotExistRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.RDirSync/EnsureNotExist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RDirSync service

type RDirSyncServer interface {
	Stat(context.Context, *StatRequest) (*FileInfo, error)
	ReadDir(*ReadDirRequest, RDirSync_ReadDirServer) error
	FetchFile(*FetchFileRequest, RDirSync_FetchFileServer) error
	SendFile(RDirSync_SendFileServer) error
	Chown(context.Context, *ChownRequest) (*Empty, error)
	Chmod(context.Context, *ChmodRequest) (*Empty, error)
	Chtimes(context.Context, *ChtimesRequest) (*Empty, error)
	EnsureDirExists(context.Context, *EnsureDirExistsRequest) (*Empty, error)
	EnsureNotExist(context.Context, *EnsureNotExistRequest) (*Empty, error)
}

func RegisterRDirSyncServer(s *grpc.Server, srv RDirSyncServer) {
	s.RegisterService(&_RDirSync_serviceDesc, srv)
}

func _RDirSync_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDirSyncServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDirSync/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDirSyncServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDirSync_ReadDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadDirRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RDirSyncServer).ReadDir(m, &rDirSyncReadDirServer{stream})
}

type RDirSync_ReadDirServer interface {
	Send(*FileInfos) error
	grpc.ServerStream
}

type rDirSyncReadDirServer struct {
	grpc.ServerStream
}

func (x *rDirSyncReadDirServer) Send(m *FileInfos) error {
	return x.ServerStream.SendMsg(m)
}

func _RDirSync_FetchFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RDirSyncServer).FetchFile(m, &rDirSyncFetchFileServer{stream})
}

type RDirSync_FetchFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type rDirSyncFetchFileServer struct {
	grpc.ServerStream
}

func (x *rDirSyncFetchFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _RDirSync_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RDirSyncServer).SendFile(&rDirSyncSendFileServer{stream})
}

type RDirSync_SendFileServer interface {
	SendAndClose(*Empty) error
	Recv() (*SendFileRequest, error)
	grpc.ServerStream
}

type rDirSyncSendFileServer struct {
	grpc.ServerStream
}

func (x *rDirSyncSendFileServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rDirSyncSendFileServer) Recv() (*SendFileRequest, error) {
	m := new(SendFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RDirSync_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDirSyncServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDirSync/Chown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDirSyncServer).Chown(ctx, req.(*ChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDirSync_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChmodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDirSyncServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDirSync/Chmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDirSyncServer).Chmod(ctx, req.(*ChmodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDirSync_Chtimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChtimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDirSyncServer).Chtimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDirSync/Chtimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDirSyncServer).Chtimes(ctx, req.(*ChtimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDirSync_EnsureDirExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureDirExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDirSyncServer).EnsureDirExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDirSync/EnsureDirExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDirSyncServer).EnsureDirExists(ctx, req.(*EnsureDirExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDirSync_EnsureNotExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureNotExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDirSyncServer).EnsureNotExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RDirSync/EnsureNotExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDirSyncServer).EnsureNotExist(ctx, req.(*EnsureNotExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RDirSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RDirSync",
	HandlerType: (*RDirSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _RDirSync_Stat_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _RDirSync_Chown_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _RDirSync_Chmod_Handler,
		},
		{
			MethodName: "Chtimes",
			Handler:    _RDirSync_Chtimes_Handler,
		},
		{
			MethodName: "EnsureDirExists",
			Handler:    _RDirSync_EnsureDirExists_Handler,
		},
		{
			MethodName: "EnsureNotExist",
			Handler:    _RDirSync_EnsureNotExist_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadDir",
			Handler:       _RDirSync_ReadDir_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchFile",
			Handler:       _RDirSync_FetchFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendFile",
			Handler:       _RDirSync_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rdirsync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0x61, 0x6f, 0xd3, 0x3c,
	0x10, 0x5e, 0x9a, 0x66, 0x6d, 0xaf, 0x5d, 0x3b, 0xf9, 0xdd, 0x8b, 0x42, 0x3f, 0x15, 0x23, 0x41,
	0x05, 0x28, 0x4c, 0x03, 0x4d, 0x08, 0xbe, 0xc0, 0xda, 0x0e, 0xf1, 0x81, 0x51, 0x52, 0xfe, 0x40,
	0xd2, 0x78, 0x8b, 0x35, 0x6c, 0x87, 0xc4, 0xa1, 0x94, 0xdf, 0xc0, 0x5f, 0xe2, 0xbf, 0x21, 0xdb,
	0xcd, 0x9a, 0x54, 0x5d, 0xfb, 0xed, 0xee, 0xb9, 0xe7, 0xce, 0x8f, 0x7d, 0x77, 0x86, 0x6e, 0x1a,
	0xd1, 0x34, 0x5b, 0xf2, 0xb9, 0x97, 0xa4, 0x42, 0x0a, 0x54, 0x4b, 0x42, 0xfc, 0x15, 0xda, 0x33,
	0x19, 0x48, 0x9f, 0xfc, 0xc8, 0x49, 0x26, 0x11, 0x82, 0x7a, 0x12, 0xc8, 0xd8, 0xb5, 0x06, 0xd6,
	0xb0, 0xe5, 0x6b, 0x1b, 0x79, 0x80, 0x16, 0x01, 0x97, 0xd9, 0x97, 0x05, 0x27, 0xe9, 0x07, 0x1e,
	0x7d, 0x4c, 0x45, 0x9e, 0xb8, 0xb5, 0x81, 0x35, 0x6c, 0xfa, 0x5b, 0x22, 0xf8, 0x27, 0x74, 0x7d,
	0x12, 0x44, 0x63, 0x9a, 0xee, 0xaa, 0x3a, 0x80, 0x76, 0x20, 0x3f, 0x8b, 0x4c, 0x8e, 0x44, 0xce,
	0xa5, 0x2e, 0xe7, 0xf8, 0x65, 0xe8, 0x9e, 0x73, 0xed, 0x7b, 0xcf, 0x7d, 0x09, 0xad, 0x4b, 0xfa,
	0x9d, 0x7c, 0xe2, 0xd7, 0x22, 0x43, 0x18, 0x1c, 0xaa, 0x0c, 0xd7, 0x1a, 0xd8, 0xc3, 0xf6, 0x59,
	0xc7, 0x4b, 0x42, 0xaf, 0x88, 0xfa, 0x26, 0x84, 0xff, 0x58, 0xd0, 0x2c, 0x30, 0xa5, 0x91, 0x07,
	0x8c, 0x14, 0x1a, 0x95, 0xad, 0xb0, 0x8c, 0xfe, 0x26, 0x5a, 0x9c, 0xed, 0x6b, 0x5b, 0x61, 0x4c,
	0x44, 0x44, 0xeb, 0x70, 0x7c, 0x6d, 0x23, 0x17, 0x1a, 0x4c, 0x44, 0xdf, 0x28, 0x23, 0x6e, 0x5d,
	0x53, 0x0b, 0x17, 0x9d, 0x80, 0x23, 0x94, 0x48, 0xd7, 0xd1, 0x65, 0x8d, 0xa3, 0xd0, 0x1b, 0x7d,
	0x99, 0x43, 0x83, 0x6a, 0x07, 0xbf, 0x87, 0xe3, 0x4b, 0x22, 0xe7, 0xb1, 0x92, 0xb4, 0xeb, 0xe5,
	0x5c, 0x68, 0x84, 0xf9, 0xf5, 0xac, 0x10, 0xe6, 0xf8, 0x85, 0x8b, 0x1f, 0x99, 0x17, 0x18, 0xc5,
	0x39, 0xbf, 0x55, 0x87, 0xcc, 0x95, 0xa1, 0x73, 0x3b, 0xbe, 0x71, 0xf0, 0x3b, 0xe8, 0xcd, 0x08,
	0x8f, 0xf6, 0x9d, 0x71, 0x97, 0x6c, 0x97, 0x93, 0x1b, 0xe0, 0x4c, 0x58, 0x22, 0x97, 0xf8, 0x0a,
	0x3a, 0xa3, 0x58, 0x2c, 0xf8, 0x9e, 0x12, 0xe6, 0xea, 0xb5, 0xad, 0x57, 0xb7, 0xcb, 0x57, 0x3f,
	0x57, 0xf5, 0x98, 0x88, 0x76, 0xd5, 0x2b, 0x1e, 0xbe, 0xb6, 0x7e, 0x78, 0x3c, 0x85, 0xee, 0x28,
	0x96, 0x94, 0x91, 0x6c, 0x8f, 0x92, 0x40, 0x91, 0x56, 0x7d, 0x34, 0x8e, 0x42, 0x99, 0x46, 0x6d,
	0x83, 0x6a, 0x07, 0x3f, 0x87, 0xff, 0x27, 0x3c, 0xcb, 0x53, 0x72, 0x25, 0xe4, 0xe4, 0x17, 0xcd,
	0x76, 0x6d, 0x06, 0x7e, 0x01, 0x0f, 0x0c, 0x79, 0x4c, 0x53, 0x4d, 0xde, 0x25, 0xe3, 0xec, 0xaf,
	0x0d, 0x4d, 0x7f, 0x4c, 0xd3, 0xd9, 0x92, 0xcf, 0xd1, 0x53, 0xa8, 0xab, 0xbd, 0x43, 0x3d, 0x35,
	0x98, 0xa5, 0x0d, 0xec, 0x57, 0x26, 0x15, 0x1f, 0xa0, 0x53, 0x68, 0xac, 0xb6, 0x09, 0x21, 0x15,
	0xaa, 0xae, 0x56, 0xff, 0xa8, 0x4c, 0xcf, 0xf0, 0xc1, 0xa9, 0x85, 0x5e, 0x43, 0xeb, 0x6e, 0x8e,
	0xd0, 0x89, 0x8e, 0x6f, 0x8c, 0xd5, 0x3a, 0x4b, 0x8f, 0x8a, 0xce, 0xf2, 0xa0, 0x59, 0x0c, 0x06,
	0xfa, 0x4f, 0x8b, 0xaa, 0x8e, 0x49, 0xbf, 0xa5, 0x40, 0xd3, 0xfe, 0x83, 0xa1, 0x85, 0x9e, 0x80,
	0xa3, 0x47, 0x00, 0x1d, 0x2b, 0xbc, 0x3c, 0x0d, 0x15, 0xa6, 0xe1, 0x31, 0x11, 0x15, 0xbc, 0x75,
	0x97, 0xab, 0xbc, 0x67, 0xd0, 0x58, 0xb5, 0xd2, 0xdc, 0xb3, 0xda, 0xd7, 0x2a, 0xf7, 0x2d, 0xf4,
	0x36, 0xde, 0x1d, 0xf5, 0x75, 0x7c, 0x6b, 0x33, 0xaa, 0xb9, 0x6f, 0xa0, 0x5b, 0x6d, 0x30, 0x7a,
	0xb8, 0x4e, 0xdd, 0x68, 0x7a, 0x25, 0xf3, 0xe2, 0x1c, 0x1e, 0xcf, 0x05, 0xf3, 0x6e, 0xa8, 0x8c,
	0xf3, 0xd0, 0x53, 0x66, 0xcc, 0x83, 0xdb, 0x80, 0xe5, 0xa9, 0xb7, 0xfe, 0x58, 0xc3, 0x8b, 0xa3,
	0xa2, 0xc7, 0x53, 0xf5, 0xc9, 0x4e, 0xad, 0xf0, 0x50, 0xff, 0xb6, 0xaf, 0xfe, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xc0, 0xf1, 0xa3, 0x93, 0x7f, 0x05, 0x00, 0x00,
}
