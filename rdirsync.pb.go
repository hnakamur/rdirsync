// Code generated by protoc-gen-go.
// source: rdirsync.proto
// DO NOT EDIT!

/*
Package rdirsync is a generated protocol buffer package.

It is generated from these files:
	rdirsync.proto

It has these top-level messages:
	FetchRequest
	FileChunk
*/
package rdirsync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FetchRequest struct {
	Path    string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	BufSize int32  `protobuf:"varint,2,opt,name=bufSize" json:"bufSize,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FileChunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *FileChunk) Reset()                    { *m = FileChunk{} }
func (m *FileChunk) String() string            { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()               {}
func (*FileChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*FetchRequest)(nil), "rdirsync.FetchRequest")
	proto.RegisterType((*FileChunk)(nil), "rdirsync.FileChunk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RDirSync service

type RDirSyncClient interface {
	FetchFile(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (RDirSync_FetchFileClient, error)
}

type rDirSyncClient struct {
	cc *grpc.ClientConn
}

func NewRDirSyncClient(cc *grpc.ClientConn) RDirSyncClient {
	return &rDirSyncClient{cc}
}

func (c *rDirSyncClient) FetchFile(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (RDirSync_FetchFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RDirSync_serviceDesc.Streams[0], c.cc, "/rdirsync.RDirSync/FetchFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &rDirSyncFetchFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RDirSync_FetchFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type rDirSyncFetchFileClient struct {
	grpc.ClientStream
}

func (x *rDirSyncFetchFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RDirSync service

type RDirSyncServer interface {
	FetchFile(*FetchRequest, RDirSync_FetchFileServer) error
}

func RegisterRDirSyncServer(s *grpc.Server, srv RDirSyncServer) {
	s.RegisterService(&_RDirSync_serviceDesc, srv)
}

func _RDirSync_FetchFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RDirSyncServer).FetchFile(m, &rDirSyncFetchFileServer{stream})
}

type RDirSync_FetchFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type rDirSyncFetchFileServer struct {
	grpc.ServerStream
}

func (x *rDirSyncFetchFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

var _RDirSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rdirsync.RDirSync",
	HandlerType: (*RDirSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchFile",
			Handler:       _RDirSync_FetchFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rdirsync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0xc9, 0x2c,
	0x2a, 0xae, 0xcc, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x6c,
	0xb8, 0x78, 0xdc, 0x52, 0x4b, 0x92, 0x33, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84,
	0xb8, 0x58, 0x0a, 0x12, 0x4b, 0x32, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21,
	0x09, 0x2e, 0xf6, 0xa4, 0xd2, 0xb4, 0xe0, 0xcc, 0xaa, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6,
	0x20, 0x18, 0x57, 0x49, 0x91, 0x8b, 0xd3, 0x2d, 0x33, 0x27, 0xd5, 0x39, 0xa3, 0x34, 0x2f, 0x5b,
	0x48, 0x84, 0x8b, 0x35, 0x19, 0xc4, 0x00, 0xeb, 0xe5, 0x09, 0x82, 0x70, 0x8c, 0x3c, 0xb8, 0x38,
	0x82, 0x5c, 0x32, 0x8b, 0x82, 0x2b, 0xf3, 0x92, 0x85, 0x6c, 0xb8, 0x38, 0xc1, 0x96, 0x81, 0xf4,
	0x08, 0x89, 0xe9, 0xc1, 0x1d, 0x85, 0xec, 0x02, 0x29, 0x61, 0x24, 0x71, 0x98, 0xd9, 0x4a, 0x0c,
	0x06, 0x8c, 0x4e, 0x46, 0x5c, 0xf2, 0xf9, 0x45, 0xe9, 0x7a, 0x49, 0x99, 0x25, 0x49, 0xa5, 0xc9,
	0xd9, 0xa9, 0x25, 0x7a, 0x19, 0x79, 0x89, 0xd9, 0x89, 0xb9, 0xa5, 0x45, 0x70, 0x0d, 0x4e, 0xbc,
	0x30, 0xab, 0x02, 0x40, 0xde, 0x0c, 0x60, 0x4c, 0x62, 0x03, 0xfb, 0xd7, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x24, 0xa9, 0xc3, 0xd9, 0x01, 0x01, 0x00, 0x00,
}
